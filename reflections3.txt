1. When would you want to use a remote repository rather than
keeping all your work local?
A. One reason would be if you were doing group work with others.
If more than one person is working on a project, it would be
helpful for all parties to be able to access the files easily
from a shared space.

2. Why might you want to always pull changes manually rather
than having Git automatically stay up-to-date with your remote
repository?
A. One good reason is so you have more control. If, for
example, you are in the middle of working on something in a
file, you wouldn't want Git to make changes on that file
if someone else were to create a commit.

3. Describe the differences between forks, clones, and
branches. When would you use one instead of another?
A. Forks are when you create a new version of someone else's
repository within your own github account/own computer. It
also links back to the original repository so the original
person gets credit for their work, AND it makes it easier to
make a pull request later on.
   Clones copy the existing repository onto your local computer
so you can edit files from there. It doesn't necessarily
effect anything on github unless you use push and have
permissions to alter the github repository.
   Branches make an alternate path within a repository, where
you can experiment with things or else have a few people work
on the same project at the same time.

4. What is the benefit of having a copy of the last known
state of the remote stored locally?
A. You can check your work against it, I guess? I'm not really
sure what the question is asking...

5. How would you collaborate without using Git or GitHub? What
would be easier, and what would be harder?
A. One of the things that would get a lot harder would be doing
merges manually. It would take longer. Another benefit of GitHub
is that it helps to keep you up-to-date with changes your
collaborators are making (though within your control--you can,
for example, ignore emails of pull requests until you're ready
to look at them).
   Without GitHub you could either pass a file back and forth
between you over email or perhaps work on the same files in
something like Google Docs. But you would need to have a lot
more open communication between you to keep track of who is
doing what.
	On the other hand, while having to keep open lines of
communication might seem to slow things down, there is a benefit
to knowing you're all on the same page.

6. When would you want to make changes in a seperate branch
rather than directly in master? What benefits does each
approach have?
A. Making changes directly to master makes things more
straightforward in terms of workflow, but it does have
disadvantages. One of these is that using branches gives you
more leeway to experiment with potentially buggy code without
breaking the code in the master branch. Another advantage
of working in branches is that you can do something in the
code within a sort of "closed" environment on your own without
worrying too much about what other changes are happening in
other parts of the code.
